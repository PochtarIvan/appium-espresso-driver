image: thyrlian/android-sdk

variables:
  ANDROID_COMPILE_SDK: "28"
  ANDROID_BUILD_TOOLS: "28.0.2"
  ANDROID_SDK_TOOLS:   "4333796"
  ANDROID_EMU_TARGET: "android-28"
  ANDROID_EMU_NAME: "test"
  TERM: "dumb"
  MOCHA_TIMEOUT: 0

before_script:
  # NodeJS installation
  - curl -sL https://deb.nodesource.com/setup_11.x | bash -
  - apt install nodejs
  - node --version
  - npm --version
  - npm install
  - npm install --chromedriver_version="2.24"

# Define Android specific test
.androidE2E:
  before_script:
  # Android stuff
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
  - unzip -d android-sdk-linux android-sdk.zip
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "emulator"
  - echo y | android-sdk-linux/tools/bin/sdkmanager "system-images;android-${ANDROID_COMPILE_SDK};google_apis;x86"
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
  - chmod +x ./espresso-server/gradlew

  # Temporarily disable checking for EPIPE error and use yes to accept all licenses
  - set +o pipefail
  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
  - set -o pipefail

  # Build and run the Emulator
  - echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n test -k "system-images;android-25;google_apis;armeabi-v7a"
  - $ANDROID_HOME/tools/emulator -list-avds
  - $ANDROID_HOME/tools/emulator @Pixel_2_API_P

  # NodeJS installation
  - curl -sL https://deb.nodesource.com/setup_11.x | bash -
  - apt install nodejs
  - node --version
  - npm --version
  - npm install
  - npm install --chromedriver_version="2.24"
  - npm run build

cache:  
  paths:
    - node_modules/

stages:
  - test
  - android

# Define the jobs here...

# Run the NodeJS Mocha Tests and JUnit Unit Tests here
#unitTests:
  #stage: test
  #script:
    #- npx eslint lib/ test/
    #- npx gulp unit-test

junitTests:
  stage: android
  extends: .androidE2E
  script:
    - npm run test:server

e2eTestCommands:
  stage: android
  extends: .androidE2E
  script:
    - npx mocha --timeout ${MOCHA_TIMEOUT} build/test/functional/commands